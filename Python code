# Define membership functions
def fuzzy_membership_temperature(temperature):
    membership = {'cold': max(min((50 - temperature) / 50, 1), 0),
                  'warm': max(min((temperature - 0) / 50, 1), 0),
                  'hot': max(min((temperature - 50) / 50, 1), 0)}
    return membership

def fuzzy_membership_power(power):
    membership = {'low': max(min((50 - power) / 50, 1), 0),
                  'medium': max(min((power - 0) / 50, 1), 0),
                  'high': max(min((power - 50) / 50, 1), 0)}
    return membership

# Define rules
def fuzzy_rule_base(temperature):
    if temperature['cold'] > 0:
        return {'high': min(temperature['cold'], 1)}
    elif temperature['warm'] > 0:
        return {'medium': min(temperature['warm'], 1)}
    elif temperature['hot'] > 0:
        return {'low': min(temperature['hot'], 1)}

# Defuzzification
def defuzzify(power):
    values = {'low': 0, 'medium': 50, 'high': 100}
    numerator = sum(value * values[key] for key, value in power.items())
    denominator = sum(power.values())
    return numerator / denominator if denominator != 0 else 0

# Main function
def fuzzy_controller(temperature):
    membership_temperature = fuzzy_membership_temperature(temperature)
    power = fuzzy_rule_base(membership_temperature)
    power_level = defuzzify(power)
    return power_level

# Example usage
ambient_temperature = 100
power_level = fuzzy_controller(ambient_temperature)
print("Ambient Temperature:", ambient_temperature)
print("Power Level:", power_level)
